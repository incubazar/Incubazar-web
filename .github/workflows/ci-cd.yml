name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # ============================================================================
  # JOB 1: LINT & TYPE CHECK
  # ============================================================================
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npm run type-check

      - name: Check code formatting
        run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"

  # ============================================================================
  # JOB 2: SECURITY AUDIT
  # ============================================================================
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # ============================================================================
  # JOB 3: BUILD FRONTEND
  # ============================================================================
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Check bundle size
        run: npx @next/bundle-analyzer

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: .next
          retention-days: 7

  # ============================================================================
  # JOB 4: TEST FRONTEND (when tests are added)
  # ============================================================================
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Uncomment when tests are added
      # - name: Run unit tests
      #   run: npm test -- --coverage
      
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}
      #     files: ./coverage/lcov.info

      - name: Placeholder for tests
        run: echo "Tests will be added in future iterations"

  # ============================================================================
  # JOB 5: BUILD & TEST AI SERVICE
  # ============================================================================
  build-ai-service:
    name: Build & Test AI Service
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./ai-service
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run Python linting
        working-directory: ./ai-service
        run: |
          pip install flake8 black
          flake8 app --max-line-length=120
          black --check app

      # Uncomment when tests are added
      # - name: Run Python tests
      #   working-directory: ./ai-service
      #   run: pytest --cov=app --cov-report=xml

      - name: Build Docker image
        working-directory: ./ai-service
        run: docker build -t incubazar-ai:${{ github.sha }} .

  # ============================================================================
  # JOB 6: DATABASE MIGRATIONS CHECK
  # ============================================================================
  check-migrations:
    name: Check Database Migrations
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Supabase CLI
        run: npm install -g supabase

      - name: Validate migration files
        run: |
          echo "Checking migration syntax..."
          for file in supabase/migrations/*.sql; do
            echo "Validating $file"
            # Basic SQL syntax check
            if ! grep -q "CREATE TABLE\|ALTER TABLE\|CREATE INDEX" "$file"; then
              echo "Warning: $file may not contain valid SQL"
            fi
          done

  # ============================================================================
  # JOB 7: LIGHTHOUSE PERFORMANCE AUDIT (on PR only)
  # ============================================================================
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build-frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            http://localhost:3000
            http://localhost:3000/login
            http://localhost:3000/register
          configPath: './lighthouserc.json'
          uploadArtifacts: true

  # ============================================================================
  # JOB 8: DEPLOY TO VERCEL (main branch only)
  # ============================================================================
  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-frontend, test-frontend, security-audit]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  # ============================================================================
  # JOB 9: DEPLOY AI SERVICE TO RAILWAY (main branch only)
  # ============================================================================
  deploy-ai-service:
    name: Deploy AI Service to Railway
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-ai-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ai-service

  # ============================================================================
  # JOB 10: POST-DEPLOYMENT SMOKE TESTS
  # ============================================================================
  smoke-tests:
    name: Post-Deployment Smoke Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [deploy-frontend, deploy-ai-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test Frontend health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://incubazar.vercel.app)
          if [ $response -ne 200 ]; then
            echo "Frontend health check failed with status $response"
            exit 1
          fi
          echo "Frontend is healthy (status: $response)"

      - name: Test AI Service health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.AI_SERVICE_URL }}/health)
          if [ $response -ne 200 ]; then
            echo "AI Service health check failed with status $response"
            exit 1
          fi
          echo "AI Service is healthy (status: $response)"

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Deployment completed! Frontend: https://incubazar.vercel.app'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
