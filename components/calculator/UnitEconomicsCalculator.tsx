"use client"

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Button } from '@/components/ui/button'
import { Calculator as CalcIcon, TrendingUp, TrendingDown, Target } from 'lucide-react'
import type { CalculatorState, LTVInputs, CACInputs, RetentionInputs, LTVCACOutputs, RetentionOutputs } from '@/lib/types/calculator'
import { calculateLTVCAC, generateSensitivityMatrix, calculateRetention, formatCurrency, formatPercentage } from '@/lib/calculator/engine'
import { TooltipInfo } from './TooltipInfo'

interface UnitEconomicsCalculatorProps {
  state: CalculatorState
  onUpdate: (unitEconomics: CalculatorState['unitEconomics']) => void
  onResults: (ltvCac: LTVCACOutputs, retention: RetentionOutputs | null) => void
}

export function UnitEconomicsCalculator({ state, onUpdate, onResults }: UnitEconomicsCalculatorProps) {
  const [ltvInputs, setLtvInputs] = useState<LTVInputs>(state.unitEconomics.ltv)
  const [cacInputs, setCacInputs] = useState<CACInputs>(state.unitEconomics.cac)
  const [retentionInputs, setRetentionInputs] = useState<RetentionInputs>(state.unitEconomics.retention)
  const [ltvCacResults, setLtvCacResults] = useState<LTVCACOutputs | null>(null)
  const [retentionResults, setRetentionResults] = useState<RetentionOutputs | null>(null)
  const [showSensitivity, setShowSensitivity] = useState(false)
  const [sensitivityMatrix, setSensitivityMatrix] = useState<any>(null)

  useEffect(() => {
    setLtvInputs(state.unitEconomics.ltv)
    setCacInputs(state.unitEconomics.cac)
    setRetentionInputs(state.unitEconomics.retention)
  }, [state.unitEconomics])

  const handleCalculate = () => {
    const ltvCac = calculateLTVCAC(ltvInputs, cacInputs)
    setLtvCacResults(ltvCac)
    
    let retention: RetentionOutputs | null = null
    if (retentionInputs.startMRR > 0) {
      retention = calculateRetention(retentionInputs)
      setRetentionResults(retention)
    }

    onUpdate({ ltv: ltvInputs, cac: cacInputs, retention: retentionInputs })
    onResults(ltvCac, retention)
  }

  const handleSensitivityAnalysis = () => {
    const matrix = generateSensitivityMatrix(ltvInputs, cacInputs)
    setSensitivityMatrix(matrix)
    setShowSensitivity(true)
  }

  const getRatingColor = (rating: string) => {
    switch (rating) {
      case 'strong':
        return 'bg-green-100 text-green-800 dark:bg-green-950 dark:text-green-300'
      case 'good':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-950 dark:text-blue-300'
      case 'needs-improvement':
        return 'bg-amber-100 text-amber-800 dark:bg-amber-950 dark:text-amber-300'
      case 'critical':
        return 'bg-red-100 text-red-800 dark:bg-red-950 dark:text-red-300'
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-950 dark:text-gray-300'
    }
  }

  return (
    <div className="space-y-6">
      {/* LTV Inputs */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Target className="h-5 w-5" />
            Lifetime Value (LTV) Calculator
            <TooltipInfo
              term="Lifetime Value (LTV)"
              definition="The total revenue a customer generates over their entire relationship with your company"
              benchmark="LTV should be at least 3x your CAC for a healthy business"
              example="If a customer pays $100/mo for 24 months with 70% margin: LTV = $100 × 24 × 0.70 = $1,680"
            />
          </CardTitle>
          <CardDescription>
            Calculate the total value generated by each customer over their lifetime
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="space-y-2">
              <Label htmlFor="arpu">
                Average Revenue Per User (ARPU) $/month
                <TooltipInfo
                  term="ARPU"
                  definition="Average monthly revenue generated per customer"
                  example="Total MRR ÷ Number of customers"
                />
              </Label>
              <Input
                id="arpu"
                type="number"
                min="0"
                step="1"
                value={ltvInputs.arpu || ''}
                onChange={(e) => setLtvInputs(prev => ({ ...prev, arpu: parseFloat(e.target.value) || 0 }))}
                placeholder="100"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="gross-margin">
                Gross Margin (%)
                <TooltipInfo
                  term="Gross Margin"
                  definition="Percentage of revenue retained after direct costs (COGS)"
                  benchmark="SaaS: 70-85%, E-commerce: 30-50%"
                  example="If you make $100 and COGS is $30, gross margin = 70%"
                />
              </Label>
              <Input
                id="gross-margin"
                type="number"
                min="0"
                max="100"
                step="1"
                value={ltvInputs.grossMargin || ''}
                onChange={(e) => setLtvInputs(prev => ({ ...prev, grossMargin: parseFloat(e.target.value) || 0 }))}
                placeholder="70"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="customer-lifespan">
                Avg Customer Lifespan (months)
                <TooltipInfo
                  term="Customer Lifespan"
                  definition="Average number of months a customer stays with your company"
                  example="If monthly churn is 5%, lifespan = 1 ÷ 0.05 = 20 months"
                />
              </Label>
              <Input
                id="customer-lifespan"
                type="number"
                min="0"
                step="1"
                value={ltvInputs.avgCustomerLifespan || ''}
                onChange={(e) => setLtvInputs(prev => ({ ...prev, avgCustomerLifespan: parseFloat(e.target.value) || 0 }))}
                placeholder="24"
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* CAC Inputs */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <CalcIcon className="h-5 w-5" />
            Customer Acquisition Cost (CAC)
            <TooltipInfo
              term="Customer Acquisition Cost (CAC)"
              definition="The total cost to acquire one new customer, including all sales and marketing expenses"
              benchmark="Should be recovered in <12 months, LTV:CAC ratio >3:1"
              example="Spent $10,000 on marketing, acquired 20 customers: CAC = $500"
            />
          </CardTitle>
          <CardDescription>
            Calculate how much it costs to acquire each new customer
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="sales-marketing-spend">Total Sales & Marketing Spend ($)</Label>
              <Input
                id="sales-marketing-spend"
                type="number"
                min="0"
                step="100"
                value={cacInputs.totalSalesMarketingSpend || ''}
                onChange={(e) => setCacInputs(prev => ({ ...prev, totalSalesMarketingSpend: parseFloat(e.target.value) || 0 }))}
                placeholder="10000"
              />
              <p className="text-xs text-muted-foreground">Include salaries, ads, tools, events</p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="new-customers">New Customers Acquired</Label>
              <Input
                id="new-customers"
                type="number"
                min="0"
                step="1"
                value={cacInputs.newCustomersAcquired || ''}
                onChange={(e) => setCacInputs(prev => ({ ...prev, newCustomersAcquired: parseInt(e.target.value) || 0 }))}
                placeholder="50"
              />
              <p className="text-xs text-muted-foreground">In the same period as spend</p>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Calculate Button */}
      <Button onClick={handleCalculate} className="w-full" size="lg">
        <CalcIcon className="h-4 w-4 mr-2" />
        Calculate LTV:CAC Ratio
      </Button>

      {/* LTV:CAC Results */}
      {ltvCacResults && (
        <>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <Card>
              <CardHeader className="pb-3">
                <CardDescription>Lifetime Value (LTV)</CardDescription>
                <CardTitle className="text-4xl">
                  {formatCurrency(ltvCacResults.ltv)}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">
                  Per customer value
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardHeader className="pb-3">
                <CardDescription>Customer Acquisition Cost (CAC)</CardDescription>
                <CardTitle className="text-4xl">
                  {formatCurrency(ltvCacResults.cac)}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-muted-foreground">
                  Per customer cost
                </p>
              </CardContent>
            </Card>

            <Card className={`border-2 ${
              ltvCacResults.rating === 'strong' || ltvCacResults.rating === 'good' 
                ? 'border-green-600' 
                : 'border-destructive'
            }`}>
              <CardHeader className="pb-3">
                <CardDescription>LTV:CAC Ratio</CardDescription>
                <CardTitle className="text-4xl flex items-center gap-2">
                  {ltvCacResults.ratio.toFixed(2)}:1
                  {ltvCacResults.rating === 'strong' || ltvCacResults.rating === 'good' ? (
                    <TrendingUp className="h-6 w-6 text-green-600" />
                  ) : (
                    <TrendingDown className="h-6 w-6 text-destructive" />
                  )}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className={`inline-block px-3 py-1 rounded-full text-sm font-medium ${getRatingColor(ltvCacResults.rating)}`}>
                  {ltvCacResults.rating.replace('-', ' ').toUpperCase()}
                </div>
              </CardContent>
            </Card>
          </div>

          <Card>
            <CardHeader>
              <CardTitle>Analysis & Recommendations</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                <p className="text-sm">{ltvCacResults.recommendation}</p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4 p-4 bg-muted rounded-lg">
                  <div>
                    <p className="text-xs text-muted-foreground mb-1">Payback Period</p>
                    <p className="font-semibold">
                      {ltvInputs.arpu > 0 
                        ? `${(ltvCacResults.cac / (ltvInputs.arpu * ltvInputs.grossMargin / 100)).toFixed(1)} months`
                        : 'N/A'
                      }
                    </p>
                  </div>
                  <div>
                    <p className="text-xs text-muted-foreground mb-1">Monthly Profit/Customer</p>
                    <p className="font-semibold">
                      {formatCurrency(ltvInputs.arpu * (ltvInputs.grossMargin / 100))}
                    </p>
                  </div>
                  <div>
                    <p className="text-xs text-muted-foreground mb-1">Total Profit/Customer</p>
                    <p className="font-semibold">
                      {formatCurrency(ltvCacResults.ltv - ltvCacResults.cac)}
                    </p>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Sensitivity Matrix */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                LTV:CAC Sensitivity Matrix
                <TooltipInfo
                  term="Sensitivity Analysis"
                  definition="Shows how changes in CAC and churn rate affect your LTV:CAC ratio"
                  example="See which lever (reducing CAC vs improving retention) has bigger impact"
                />
              </CardTitle>
              <CardDescription>
                Explore how changes in CAC and churn rate impact your unit economics
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {!showSensitivity ? (
                <Button onClick={handleSensitivityAnalysis} variant="outline" className="w-full">
                  Generate Sensitivity Matrix
                </Button>
              ) : sensitivityMatrix && (
                <div className="overflow-x-auto">
                  <table className="w-full border-collapse">
                    <thead>
                      <tr>
                        <th className="border p-2 bg-muted">CAC Change →<br />Churn Change ↓</th>
                        {sensitivityMatrix.cacChanges.map((cac: number) => (
                          <th key={cac} className="border p-2 bg-muted text-sm">
                            {cac > 0 ? '+' : ''}{cac}%
                          </th>
                        ))}
                      </tr>
                    </thead>
                    <tbody>
                      {sensitivityMatrix.results.map((row: any[], rowIndex: number) => (
                        <tr key={rowIndex}>
                          <td className="border p-2 bg-muted font-medium text-sm">
                            {sensitivityMatrix.churnChanges[rowIndex] > 0 ? '+' : ''}
                            {sensitivityMatrix.churnChanges[rowIndex]}%
                          </td>
                          {row.map((cell: any, cellIndex: number) => (
                            <td 
                              key={cellIndex} 
                              className={`border p-2 text-center text-sm ${getRatingColor(cell.rating)}`}
                            >
                              <div className="font-bold">{cell.ratio.toFixed(2)}:1</div>
                              <div className="text-xs opacity-75">{cell.rating.replace('-', ' ')}</div>
                            </td>
                          ))}
                        </tr>
                      ))}
                    </tbody>
                  </table>
                  <p className="text-xs text-muted-foreground mt-4">
                    💡 Green cells indicate healthy ratios (≥3:1). Focus on strategies that move you toward the top-left quadrant.
                  </p>
                </div>
              )}
            </CardContent>
          </Card>
        </>
      )}

      {/* Retention Metrics */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            Net Revenue Retention (NRR)
            <TooltipInfo
              term="Net Revenue Retention (NRR)"
              definition="Measures revenue retention from existing customers, including expansions minus churn"
              benchmark="Excellent: >120%, Good: 100-120%, Needs work: <100%"
              example="Started month with $100k MRR, ended with $110k from same cohort = 110% NRR"
            />
          </CardTitle>
          <CardDescription>
            Track revenue retention and expansion from your customer base
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-2">
              <Label htmlFor="start-mrr">Starting MRR ($)</Label>
              <Input
                id="start-mrr"
                type="number"
                min="0"
                step="1000"
                value={retentionInputs.startMRR || ''}
                onChange={(e) => setRetentionInputs(prev => ({ ...prev, startMRR: parseFloat(e.target.value) || 0 }))}
                placeholder="100000"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="end-mrr">Ending MRR ($)</Label>
              <Input
                id="end-mrr"
                type="number"
                min="0"
                step="1000"
                value={retentionInputs.endMRR || ''}
                onChange={(e) => setRetentionInputs(prev => ({ ...prev, endMRR: parseFloat(e.target.value) || 0 }))}
                placeholder="105000"
              />
              <p className="text-xs text-muted-foreground">From the same customer cohort</p>
            </div>
          </div>

          {retentionResults && (
            <Card className="bg-muted">
              <CardHeader className="pb-3">
                <CardDescription>Net Revenue Retention</CardDescription>
                <CardTitle className="text-4xl">
                  {formatPercentage(retentionResults.nrr, 1)}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm">{retentionResults.benchmark}</p>
              </CardContent>
            </Card>
          )}
        </CardContent>
      </Card>
    </div>
  )
}
